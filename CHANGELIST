------------------------------------------------------------------------------------------------------------------------
 Commit ID: 
------------------------------------------------------------------------------------------------------------------------

 The main focus of this commit was to enable the plugin system to handle different versions of the plugins, specifically
 to enable the launchers to support different versions.

Overall
-------

 - - - - -


Individual components
---------------------
 - Display handler (display_handler.py)
   Updated the display handler base class to handle plugin versioning. The display handler does not support it, so it is
   currently ignored. 

 - Xrandr display handler (xrandr_display_handler.py) 
   The build_xrandr_parameters() method adds an extra space at the end which causes xrandr to throw an error. A quick
   workaround has been added to address this. The bug that causes a single display systems to break has been fixed.

 - DOSBox launcher (dosbox_launcher.py)
   Updated the launcher to use the new get_executable() method instead to referencing the executable directly, thus
   allowing the plugin system to make sure the executable for this specific version is used.

 - Game launcher (game_launcher.py)
   Updated the game launcher plugin base class to ensure the correct version of a launcher's configuration files are
   used when a launcher is started. Methods have also been added to help with verification of the different launcher
   configuration files. The get_executable() method has been added to ensure that the correct version of the launcher is
   executed.

 - RetroArch (retroarch_launcher.py)
   Newer versions of the MAME core requires more of the expected directory structure to exist than in the previous MAME
   core. Links for these are now also created and removed before a game starts and after it finishes. Because of these
   required directories, the target (executable) location is changed accordingly. The hard-coded core information has
   been removed. As a result, the code that sets the core to be used when a game is played has been updated. Additonal
   verification has been added in the verify_version() method to check if the cores location is valid. 

 - ScummVM launcher (scummvm_launcher.py)
   Updated the launcher to use the new get_executable() method instead to referencing the executable directly, thus
   allowing the plugin system to make sure the executable for this specific version is used.
   
 - Wine launcher (wine_launcher.py)
   Updated the launcher to use the new get_executable() method instead to referencing the executable directly, thus
   allowing the plugin system to make sure the executable for this specific version is used. Changed the launcher
   parameters to lower case. Added an empty implementation for the configure_env() method since Wine does not have
   configuration files like the other launchers have. 

 - Input mapper base class (input_mapper.py)
   Updated the input mapper base class to handle plugin versioning. The input mapper does not support it, so it is
   currently igonred.

------------------------------------------------------------------------------------------------------------------------
 Commit ID: 148b1573274924bf326e05577590402f57441fe0, a0cdacb8c9ca2fdb99c0c59c8e6774cc79798e3b
------------------------------------------------------------------------------------------------------------------------

 The main focus of this commit was to add the DOSBox mapper.

Overall
-------
 - Added the DOSBox mapper.

 - Updated helper shell scripts.

 - Created the config manager.

 - - - - -


Individual components
---------------------
 - Game add helper script (add-games.sh)
   The game add helper script has been updated to enable a user to add a single game instead of all games in a
   directory. This script is basically for y personal use since it depends on a specific directory structure.

 - Game launcher script (game-launcher.sh)
   The game launcher script has been updated to point to the new directory and python script. This script uses a hard-
   coded location and is therefore also not quite ready for general use.

 - Installation helper (install.sh)
   An installation helper script (install.sh) has been added to add the script to handle some of the common tasks when
   installing the games collector, such as linking the launcher script in /usr/local/bin and to create the icon
   directories that are used. This script is not yet ready for general use.

 - Game launcher (game-launcher.py)
   Updated the game launcher plugin base class to use the new config manager.

 - DOSBox mapper (dosbox_mapper.py, mapper-0.74.map)
   Added a mapper for use with DOSBox, since mapping using Xmodmap does not appear to be working.

 - Input mapper (input_mapper.py)
   Updated the input mapper plugin base class to use the new config manager.

 - Plugin (plugin_handler.py)
    * Updated the plugin base class to use the new config manager.
    * Saved the installation directory location to enable plugins (such as DOSBox) to use it.

 - Config manager (utils.py/config_manager.py)
   * Renamed uitls.py file to config_manager.py.
   * Added the ConfigManager class, thus making this the config manager. The config manager is meant to handle all the
     configuration used by the games collector and all its plugins. This removes unnecessary dependencies between the
     components that initially loads the configuration and the components that at a later stage also requires the same
     configuration. This is a singleton and should be accessed via the static get_instance() method.
   * Added methods to add configuration to (set_config(...)) and retreive configuration from (get_config(...)) the
     config manager.
   * Added two methods that should aid with development: set_user_dir(...) and set_inst_dir(...). These methods allows
     the default configuration locations to be overridden. Previously, live data needed to be used to test new changes
     which made playing games difficult while also working on a newer version of The Games Collector - especially if
     the newer version had changes that would break older versions. Updated the rest of the code to use this.

 - The Games Collector (the-games-collector.py)
    * Updated the games collector to use the new config manager.
    * (BUGFIX) Updated the menu entry code to use the new 'play' parameter instead of the old 'launch' parameter when
      creating a desktop file (menu file). This was never updated when the new parameter was originally introduced.
    * Added support for specifying which mapper should be used for a specific mapping type. This was required since the
      DOSBox and Xmodmap mappers perform mappings for the same mapping type and in some instances the wrong mapper
      ended up being used.
    * Added code to accept two new parameters (-c and -i) which is used to override the installation and configuration
      locations.

 - Mapping files (antimicro.mapper, DOSBox.mapper, RetroArch.mapper, Xmodmap.mapper)
   Updated the existing mapping files with all the mappings for a keyboard and added DOSBox.mapper (wich also includes
   all the mappings for a keyboard).

------------------------------------------------------------------------------------------------------------------------
 Commit ID: 7bfbc032d8a91aa0d744f560893603698c1320ee
------------------------------------------------------------------------------------------------------------------------

 This commit contains changes to how configuration files are loaded and values retrieved from them.

Overall
-------
 - Updated the code to use some of the new configuration methods.

 - Removed some duplicate code in some of the input mapper implementations.

 - - - - -


Individual components
---------------------
 - Changes have been made to the utility python script (utils.py) to remove some duplicate code when loading
   configuration files. One method is unused and will be used in the next update (by the DOSBox input mapper).

 - New methods have been added to the Plugin class (plugin_handler.py) to make it easier to get configuration.

 NOTE: These changes will probably in the not too distant future be merged into a new Configuration class that will
       handle all of the configuration.

 - Two of the launchers will still using an incorrect config file to hold their configuration values. This has been
   fixed.

------------------------------------------------------------------------------------------------------------------------
 Commit ID: b9ac5b58b834d274c3ecbb617b1458f78196df15
------------------------------------------------------------------------------------------------------------------------

 The main focus of this commit was to remove all the Struct classes and replace them with dictionaries.

Overall
-------
 - Replaced all Struct classes with dictionaries.

 - Removed unused imports, did some minor refactoring and fixed some indentation.

 - - - - -


Individual components
---------------------
 - Two changes where made to the display handler files:
    * The DisplayHandler class (display_handler.py) was missing the 'parameters' parameter.
    * Delays where added to the Xrandr implementation (xrandr_display_handler.py) just to get it to work correctly.
      After getting the code to work correctly (done in the previous commit), I found that I could reduce the delay
      while still getting the desired results.


------------------------------------------------------------------------------------------------------------------------
 Commit ID: ae6e07a8b08b0d7598800d40cbbd1a51f6c497a5
------------------------------------------------------------------------------------------------------------------------

The main focus in this commit was to add plug-in support.

Overall
-------
 - Added plug-in support. The main reason being to break the tight coupling between some of the components and the
   launcher. A lot of the functionality that can have different implementations has been converted to plug-ins:
    * Launchers: DOSBox, Linux (new), RetroArch, ScummVM, Wine
    * Input mappers: antimicro, RetroArch, Xmodmap
    * Display handlers: Xrandr

 - Started to use methods in subclasses only for performing actions and not for returning values (like getter methods).
   Instead of calling getter methods, the variables that contain the value is accessed directly. Since private
   variables do not exist there was no point in bothering with getter and setter methods.

 - - - - -


Individual components
---------------------
 - Plug-in handler (plugin_handler.py)
   The heart of the plug-in functionality. It will load all the plug-ins of a specific type and is used to get the
   specific implementation required.

 - Display handler (display_handler.py)
   Contains the base class for display handlers. The reason for adding display handlers is because using Xrandr via a
   subprocess is not in my opinion the best solution, so in future other display handlers might be added that in some
   cases may work better and to add a display handler for Windows (very far into the future), when Windows support is
   added.  

 - XRandr (xrandr_display_handler.py)
    * Apart from being converted into a plug-in, better support has been added for dual screen setups:
       - The most noticeable change has been that the 2nd monitor does not get disabled after a game is finished.
       - The resolutions of both screens can be set in the game descriptor file.
       - Any one of the screens can be turned off as well (sadly required just to get Baldur's gate to display
         properly).
    * SINGLE SCREEN SUPPORT BROKEN. The game launcher currently does not work with one screen. It will be fixed in a
      future release (soon).

 - RetroArch (retroarch_launcher.py)
    * Moved the input mapping functionality to a separate RetroArch input mapper (a plug-in).

 - Wine (wine_launcher.py)
    * A new parameter has been added: USE_ALTERNATE_WAIT
      For some unknown reason, Python does not actually wait for the subprocess to finish. The game launcher then exits
      normally, thinking that the Wine game has finished. All actions that has to be taken after the game has finished
      (such as changing the resolution) is then performed. The most noticeable being a resolution change. This parameter
      allows another method to be used to determine if a game has finished (looking at the processes listed in /proc).

 - Input mappers (input_mapper.py)
    * Contains the base class for input mapping plug-ins.

 - The Games Collector (the-games-collector.py)
    * An effort has also been put into trying to reuse code while adding a game and launching a game with the goal of
      using the same validation for both. Not everything in the game descriptor file gets properly validated when a
      game is being added, especially the input mappings.
    * Renamed from game-launcher.py to the-games-collector.py), mostly to avoid confusion with the launcher plug-in file
      (plugins/launchers/game_launcher.py).
    * All of the launcher specific code has been moved to their respective launchers:
       - The contents of the load_globals() method.
       - add_dosbox_conf(...), add_retroarch_conf(...) and add_wine_conf(...).
       - launch_dosbox_game(...), launch_retroarch_game(...) (with replace_tokens(...), launch_wine_game(...) and
         launch_scummvm_game(...).
       - The launcher specific code in launch_game(...)
    * The functionality of add_launcher_conf(...) has been moved to init_launcher(...).
    * The add_menu_conf(...) method has been renamed to set_game_menu_data(...)
    * Pre-launch methods have been added to remove some of the functionality from the launch_game(...) method
      configure_env(...) and activate_input_mappers(...)
      This has been done to help make the launch_game(...) method a bit more generic, focusing more on the
      actions that needs to be taken and not the specifics of those actions.
    * Similarly, post-launch methods have been added to remove some of the functionality from the launch_game(...)
      method: revert_env(...) and  deactivate_input_mappers(...)
    * The update_game(...) method has been removed, including the update parameter. It can be added again if it is
      needed.
    * All the mapper specific code has been moved to their respective mappers:
       - write_retroarch_mappings(...), write_xmodmap_mappings(...) and write_antimicro_mappings(...)
    * Some of the functionality of the map_input method has been moved to input_mapper.py
    * The launch parameter has been changed to play.
    * The game-launcher has been updated to allow all the existing game descriptors to be validated. This is mostly
      used during testing.
    * Some additional refactoring was done to reduce the size of the init_launcher(...) method, such as the setting of
      certain properties as well as checking for the optical disk.

 - Some (not sure if it is all of them) instances in the code where loading configuration files have been using
   hard-coded locations have been changed to rather call a method (get_config_file(...)) that contains all the expected
   locations where configuration files can be found. This utility method was placed in utils.py

 - The mapper files (containing the mapping values required for the specific mappers) have been added: antimicro.mapper,
   RetroArch.mapper, Xmodmap.mapper

 - Some configuration files have been added:
    * Template configuration files for the icon creator and the game launcher (the-games-collector):
      config/game-launcher.cfg and config/icon-creator.cfg
    * A configuration file for the GameLauncher plugin: GameLauncher.cfg).

 - Some unused files where removed.

 - - - - - 


Backwards compatibility
-----------------------

THE CHANGES MADE TO THIS COMMIT IS NOT BACKWARDS COMPATIBLE

 - The resolution property in the game descriptor file can now take two values as well as non-resolution values (like
   'current' and 'off'). This will break previous versions of the game launcher.
 - The new parameter for the wine launcher should simply be ignored. This has no effect on backwards compatibility.

